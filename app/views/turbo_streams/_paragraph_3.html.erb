<div id='paragraph_3'>
  <%= link_to "Previous", turbo_streams_call_path(old_paragraph: 3, new_paragraph: 2), data: {turbo_stream: true} %>
  <p>Let's open the second link in the navigation pannel. If you look at the code of this page you can see that the paragraph of the article is now surrounded by the <code>turbo_frame_tag</code> tags with the identifier <code>current_paragraph</code>. This is the same <code>turbo_frame</code> that we will be changing, and the frame changes another frame, so the new template that the controller returns must also have a <code>turbo_frame</code> with the same identifier. To do this, we will use partial templates that we render on the first call and return on the request. We need another endpoint in the controller: <code>turbo_frame_change</code> to which we will send the identifier of the desired paragraph, and which will return the corresponding frame. Open the developer panel in your browser again and make sure that the part of the page that is not surrounded by <code>turbo_frame</code> tags does not change and is not returned when you click on the link. To make the TurboDrive understands which frame we want to change, we need to tell it by adding the <code>data-turbo-frame</code> parameter to the link. Rails will do the rest for us with its famous magic!</p>
  <p>Turbo frames allow us to dynamically change parts of the page, but their scope is quite small. We can only change one frame by requesting the same frame with different content. We don't have the ability to change multiple frames, or add something to the beginning or end. Only to change part of the html page as a whole.</p>
</div>
